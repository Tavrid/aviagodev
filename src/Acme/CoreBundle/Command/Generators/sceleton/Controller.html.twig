<?php

namespace {{ namespace }};

use Acme\BootstrapBundle\ColumnTypes;

use Symfony\Component\Form\AbstractType;
use {{ form_namespace }}\{{ form_class_name }};
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;

use Acme\AdminBundle\AcmeAdminBundleEvents as Events;
use Acme\AdminBundle\Event\ControllerEvent;
/*
 You will need add to your configuration
    file: {{ service }}

    admin.{{ name }}.manager :
          class: Acme\AdminBundle\Model\Slider
          arguments:
              - "@service_container"
              - {{ entity_class }}
    {% if(use_uploader) %}


    file : You media bundle /Resources/config/services.yml

    admin.{{ name }}.uploader :
          class: %media.model.upload.class%
          arguments:
              - @service_container
              - @admin.{{ name }}.manager
              - params:
                    type : {{ name }}
                    dimensions :
                      resize : [ 800_600, 50_50]
                      crop : [120_120]

    uploader.service.container :
        class : 'Acme\MediaBundle\Model\ServiceContainer'
        arguments:
          - services :
              {{ name }} : @admin.{{ name }}.uploader
    {% endif %}
*/

class {{ class_name }} extends ControllerBase
{
    public function indexAction(){
        return new Response('You need edit this action');
    }

    public function editAction(Request $request)
    {

        $this->initBaseEvent(Events::INITIALIZE_EDIT, new {{ form_class_name }}());
        return $this->edit($request);
    }

    public function addAction(Request $request)
    {

        $this->initBaseEvent(Events::INITIALIZE_ADD, new {{ form_class_name }}());
        return $this->add($request);
    }

    public function deleteAction(Request $request)
    {

        $this->initBaseEvent(Events::INITIALIZE_DELETE);
        return $this->delete($request);
    }


    public function changePositionAction(Request $request){
        $manager = $this->get('admin.{{ name }}.manager');
        $position = (int) $request->get('newPosition');
        $id = (int) $request->get('id');
        $manager->changePosition($id, $position,null,false);

        return new Response('Ok', 200);
    }


    public function markAction(Request $request)
    {
        /** @var $dispatcher \Symfony\Component\EventDispatcher\EventDispatcherInterface */
        $dispatcher = $this->get('event_dispatcher');
        $controller = $this;
        $dispatcher->addListener(Events::INITIALIZE_EDIT, function (ControllerEvent $event) use ($controller) {

            $form = $controller->createFormBuilder(null, array('compound' => true))
                ->add('name', 'hidden')
                ->add('value', 'hidden')
                ->getForm();
            $event->setDataManager($this->get('admin.{{ name }}.manager'))
                ->setResponse(new Response('Method not allowed', Response::HTTP_NOT_FOUND))
                ->setFrom($form);

        });

        $dispatcher->addListener(Events::FORM_SUCCESS_VALIDATE_EDIT, function (ControllerEvent $event) use ($controller) {

            $form = $event->getForm();
            $entity = $event->getDataManager()->getEntity();
            $data = $form->getData();
            if ($data['name'] == 'isShow') {
                $entity->setIsShow($data['value']);
                $event->getDataManager()->save($entity);
                $event->setResponse(new Response('Ok'));
            } else {
                $event->setResponse(new Response('Method not allowed', Response::HTTP_NOT_FOUND));
            }
        });

        return $this->edit($request);
    }


    protected function initBaseEvent($eventName, AbstractType $formType = null)
    {
        /** @var $dispatcher \Symfony\Component\EventDispatcher\EventDispatcherInterface */
        $dispatcher = $this->get('event_dispatcher');
        $dispatcher->addListener($eventName, function (ControllerEvent $event) use ($formType) {
            $event->setDataManager($this->get('admin.{{ name }}.manager'))
{% if(use_uploader) %}->setUploaderManager($this->get('admin.{{ name }}.uploader')){% endif %};
            if ($formType) {
                $event->setFormType($formType);
            }
        });
    }

}
